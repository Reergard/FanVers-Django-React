"""
–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ —Ç–∞ —ó—Ö –ø—Ä–æ—Ñ—ñ–ª—è–º–∏.

–í–ê–ñ–õ–ò–í–û: –†–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–ß–∏—Ç–∞—á, –ü–µ—Ä–µ–∫–ª–∞–¥–∞—á, –õ—ñ—Ç–µ—Ä–∞—Ç–æ—Ä) —É–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è –¢–Ü–õ–¨–ö–ò —á–µ—Ä–µ–∑ —Ä–æ–∑–¥—ñ–ª "–ü—Ä–æ—Ñ—ñ–ª—ñ".
–ì—Ä—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–æ–ª—ñ –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ.
"""

from django.contrib import admin
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from .models import Profile, User
from .forms import CustomUserChangeForm, CustomUserCreationForm
from django.urls import reverse
from django.contrib.auth.models import Group
from django import forms
import logging

logger = logging.getLogger(__name__)


@admin.register(User)
class UserAdmin(BaseUserAdmin):
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏. –†–æ–ª—ñ —É–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è —á–µ—Ä–µ–∑ Profile."""
    
    model = User
    ordering = ["username"]
    add_form = CustomUserCreationForm
    form = CustomUserChangeForm

    list_display = ["email", "username", "created", "is_active", "get_profile_role"]
    list_display_links = ["email"]
    list_filter = ["is_active"]
    search_fields = ["email", "username"]

    def get_profile_role(self, obj):
        try:
            role = obj.profile.role
            if role == '–õ—ñ—Ç–µ—Ä–∞—Ç–æ—Ä':
                return f"üìö {role}"
            elif role == '–ü–µ—Ä–µ–∫–ª–∞–¥–∞—á':
                return f"üîÑ {role}"
            else:
                return f"üë§ {role}"
        except:
            return '‚ùì –ù/–î'
    get_profile_role.short_description = '–†–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'

    fieldsets = (
        (None, {'fields': ('username', 'email', 'password')}),
        ('Permissions', {'fields': ('is_active', 'is_staff', 'is_superuser', 'user_permissions')}),
        ('–†–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', {
            'fields': (),
            'description': '‚ö†Ô∏è –†–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–ß–∏—Ç–∞—á, –ü–µ—Ä–µ–∫–ª–∞–¥–∞—á, –õ—ñ—Ç–µ—Ä–∞—Ç–æ—Ä) —É–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è —á–µ—Ä–µ–∑ —Ä–æ–∑–¥—ñ–ª "–ü—Ä–æ—Ñ—ñ–ª—ñ". –ì—Ä—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.',
            'classes': ('collapse',)
        }),
    )

    add_fieldsets = (
        (None, {
            'classes': ('wide',),
            'fields': ('username', 'email', 'password1', 'password2'),
        }),
    )

    # –£–±–∏—Ä–∞–µ–º filter_horizontal –¥–ª—è groups, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å —Ä–æ–ª–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Profile


@admin.register(Profile)
class ProfileAdmin(admin.ModelAdmin):
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—è–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ —ó—Ö —Ä–æ–ª—è–º–∏"""
    
    list_display = ('username', 'email', 'created', 'image', 'get_owned_books_count', 'role', 'get_user_groups')
    search_fields = ('username', 'email')
    list_filter = ('role', 'created')
    
    def get_owned_books_count(self, obj):
        return obj.user.owned_books.count()
    get_owned_books_count.short_description = '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–Ω–∏–≥'

    def get_user_groups(self, obj):
        """–ü–æ–∫–∞–∑—É—î –≥—Ä—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        groups = obj.user.groups.all()
        return ', '.join([group.name for group in groups]) if groups else '–ù–µ–º–∞—î –≥—Ä—É–ø'
    get_user_groups.short_description = '–ì—Ä—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'

    def get_owned_books_list(self, obj):
        books = obj.user.owned_books.all()
        return '\n'.join([f"{book.title}" for book in books])
    get_owned_books_list.short_description = '–ö–Ω–∏–≥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'

    readonly_fields = ('get_owned_books_list', 'created', 'get_user_groups')

    actions = ['make_reader', 'make_translator', 'make_author']

    def make_reader(self, request, queryset):
        try:
            updated = queryset.update(role='–ß–∏—Ç–∞—á')
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
            for profile in queryset:
                profile.user.groups.clear()
                reader_group, _ = Group.objects.get_or_create(name='–ß–∏—Ç–∞—á')
                profile.user.groups.add(reader_group)
            self.message_user(request, f'{updated} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–µ–ø–µ—Ä –º–∞—é—Ç—å —Ä–æ–ª—å "–ß–∏—Ç–∞—á". –ì—Ä—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.')
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –º–∞—Å–æ–≤–æ–º—É –∑–º—ñ–Ω–µ–Ω–Ω—ñ —Ä–æ–ª–µ–π –Ω–∞ '–ß–∏—Ç–∞—á': {str(e)}")
            self.message_user(request, f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω–µ–Ω–Ω—ñ —Ä–æ–ª–µ–π: {str(e)}', level='ERROR')
    make_reader.short_description = "–ó—Ä–æ–±–∏—Ç–∏ —á–∏—Ç–∞—á–∞–º–∏"

    def make_translator(self, request, queryset):
        try:
            updated = queryset.update(role='–ü–µ—Ä–µ–∫–ª–∞–¥–∞—á')
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
            for profile in queryset:
                profile.user.groups.clear()
                translator_group, _ = Group.objects.get_or_create(name='–ü–µ—Ä–µ–∫–ª–∞–¥–∞—á')
                profile.user.groups.add(translator_group)
            self.message_user(request, f'{updated} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–µ–ø–µ—Ä –º–∞—é—Ç—å —Ä–æ–ª—å "–ü–µ—Ä–µ–∫–ª–∞–¥–∞—á". –ì—Ä—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.')
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –º–∞—Å–æ–≤–æ–º—É –∑–º—ñ–Ω–µ–Ω–Ω—ñ —Ä–æ–ª–µ–π –Ω–∞ '–ü–µ—Ä–µ–∫–ª–∞–¥–∞—á': {str(e)}")
            self.message_user(request, f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω–µ–Ω–Ω—ñ —Ä–æ–ª–µ–π: {str(e)}', level='ERROR')
    make_translator.short_description = "–ó—Ä–æ–±–∏—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞–º–∏"

    def make_author(self, request, queryset):
        try:
            updated = queryset.update(role='–õ—ñ—Ç–µ—Ä–∞—Ç–æ—Ä')
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
            for profile in queryset:
                profile.user.groups.clear()
                author_group, _ = Group.objects.get_or_create(name='–õ—ñ—Ç–µ—Ä–∞—Ç–æ—Ä')
                profile.user.groups.add(author_group)
            self.message_user(request, f'{updated} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–µ–ø–µ—Ä –º–∞—é—Ç—å —Ä–æ–ª—å "–õ—ñ—Ç–µ—Ä–∞—Ç–æ—Ä". –ì—Ä—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.')
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –º–∞—Å–æ–≤–æ–º—É –∑–º—ñ–Ω–µ–Ω–Ω—ñ —Ä–æ–ª–µ–π –Ω–∞ '–õ—ñ—Ç–µ—Ä–∞—Ç–æ—Ä': {str(e)}")
            self.message_user(request, f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω–µ–Ω–Ω—ñ —Ä–æ–ª–µ–π: {str(e)}', level='ERROR')
    make_author.short_description = "–ó—Ä–æ–±–∏—Ç–∏ –ª—ñ—Ç–µ—Ä–∞—Ç–æ—Ä–∞–º–∏"
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('user', 'username', 'email', 'about', 'image', 'balance')
        }),
        ('–†–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', {
            'fields': ('role', 'get_user_groups'),
            'description': ' –û–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ü—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–æ–ª—ñ –≥—Ä—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±—É–¥—É—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω—ñ. –î–æ—Å—Ç—É–ø–Ω—ñ —Ä–æ–ª—ñ: –ß–∏—Ç–∞—á, –ü–µ—Ä–µ–∫–ª–∞–¥–∞—á, –õ—ñ—Ç–µ—Ä–∞—Ç–æ—Ä. –î–ª—è –º–∞—Å–æ–≤–æ–≥–æ –∑–º—ñ–Ω–µ–Ω–Ω—è —Ä–æ–ª–µ–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –¥—ñ—ó –≤–Ω–∏–∑—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏.'
        }),
        ('–ö–Ω–∏–≥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', {
            'fields': ('get_owned_books_list',),
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('created', 'token', 'is_default'),
            'classes': ('collapse',)
        }),
    )

    def save_model(self, request, obj, form, change):
        if 'role' in form.changed_data:  # –ï—Å–ª–∏ —Ä–æ–ª—å –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞
            new_role = form.cleaned_data['role']
            
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ä–æ–ª—ñ
            valid_roles = ['–ß–∏—Ç–∞—á', '–ü–µ—Ä–µ–∫–ª–∞–¥–∞—á', '–õ—ñ—Ç–µ—Ä–∞—Ç–æ—Ä']
            if not new_role or new_role not in valid_roles:
                from django.contrib import messages
                messages.error(request, f"–ù–µ–≤—ñ—Ä–Ω–∞ —Ä–æ–ª—å: '{new_role}'. –î–æ–∑–≤–æ–ª–µ–Ω—ñ —Ä–æ–ª—ñ: {', '.join(valid_roles)}. –†–æ–ª—ñ —É–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è —á–µ—Ä–µ–∑ —Ä–æ–∑–¥—ñ–ª '–ü—Ä–æ—Ñ—ñ–ª—ñ'.")
                return
            
            try:
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤–æ–π —Ä–æ–ª—å—é
                obj.user.groups.clear()
                group, _ = Group.objects.get_or_create(name=new_role)
                obj.user.groups.add(group)
                logger.info(f"–†–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {obj.user.username} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '{new_role}' —Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –∑ –≥—Ä—É–ø–∞–º–∏")
                
                # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
                from django.contrib import messages
                messages.success(request, f"–†–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {obj.user.username} —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '{new_role}'. –ì—Ä—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.")
                
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –≥—Ä—É–ø –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {obj.user.username}: {str(e)}")
                from django.contrib import messages
                messages.error(request, f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –≥—Ä—É–ø: {str(e)}")
                return
            
        super().save_model(request, obj, form, change)

