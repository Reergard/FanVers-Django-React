import { api } from '../instance';

let purchaseInProgress = false;
let lastPurchaseTime = 0;
const PURCHASE_COOLDOWN = 5000; // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

export const usersAPI = {
    // ‚ö†Ô∏è –í–ê–ñ–õ–ò–í–û: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞—î—Ç—å—Å—è —á–µ—Ä–µ–∑ instance.js interceptor
    // –í—Å—ñ API –≤–∏–∫–ª–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ—Ç—Ä–∏–º—É—é—Ç—å JWT —Ç–æ–∫–µ–Ω
    // –ù–ï –¥–æ–¥–∞–≤–∞–π—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization –≤—Ä—É—á–Ω—É!
    
    getProfile: async () => {
        try {
            const response = await api.get('/users/profile/');
            return response.data;
        } catch (error) {
            console.error('usersAPI.getProfile error:', error);
            
            // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –∑'—î–¥–Ω–∞–Ω–Ω—è
            if (error.code === 'ERR_NETWORK' || error.message === 'Network Error') {
                console.error('üåê –ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º –≤ getProfile');
                throw new Error('–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º');
            }
            
            throw error;
        }
    },

    getTranslatorsList: () => {
        return api.get('/users/translators/').then(response => response.data);
    },
    
    getAuthorsList: () => {
        console.log("üåê API: –ó–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∞–≤—Ç–æ—Ä—ñ–≤");
        return api.get('/users/authors/').then(response => {
            console.log("‚úÖ API: –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:", response.data);
            return response.data;
        }).catch(error => {
            console.error("‚ùå API: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–≤—Ç–æ—Ä—ñ–≤:", error);
            throw error;
        });
    },
    
    getUserProfile: (username) => {
        return api.get(`/users/profile/${username}/`).then(response => response.data);
    },
    
    updateBalance: async (amount) => {
        try {
            const response = await api.post('/users/update-balance/', { amount });
            return response.data;
        } catch (error) {
            if (error.response?.status === 404) {
                throw new Error('–°–µ—Ä–≤—ñ—Å —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
            }
            throw error;
        }
    },
    
    purchaseChapter: async (chapterId) => {
        const now = Date.now();
        
        if (purchaseInProgress) {
            throw new Error('–ö—É–ø—ñ–≤–ª—è –≤–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ');
        }

        if (now - lastPurchaseTime < PURCHASE_COOLDOWN) {
            throw new Error('–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é');
        }

        try {
            purchaseInProgress = true;
            lastPurchaseTime = now;

            const response = await api.post(`/users/purchase-chapter/${chapterId}/`, null);

            return response.data;
        } catch (error) {
            if (error.response?.status === 429) {
                throw new Error('–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ —Ö–≤–∏–ª–∏–Ω—É');
            }
            throw error;
        } finally {
            setTimeout(() => {
                purchaseInProgress = false;
            }, PURCHASE_COOLDOWN);
        }
    },
    
    becomeTranslator: async () => {
        try {
            const response = await api.post('/users/become-translator/');
            return response.data;
        } catch (error) {
            throw error;
        }
    },
    
    becomeAuthor: async () => {
        try {
            const response = await api.post('/users/become-author/');
            return response.data;
        } catch (error) {
            throw error;
        }
    },
    
    depositBalance: async (amount) => {
        const response = await api.post('/users/add-balance/', { amount });
        return response.data;
    },
    
    withdrawBalance: async (amount) => {
        const response = await api.post('/users/withdraw-balance/', { amount });
        return response.data;
    },
    
    getUserBalance: async () => {
        try {
            const response = await api.get('/users/profile/');
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ balance –≤ –æ—Ç–≤–µ—Ç–µ
            const balance = response.data.balance !== undefined ? response.data.balance : 0;
            return { balance: balance };
        } catch (error) {
            console.error('Error fetching user balance:', error);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return { balance: 0 };
        }
    },
    
    checkBalanceForAd: async (total_cost) => {
        try {
            const response = await api.get('/users/profile/');
            const balance = response.data.balance !== undefined ? response.data.balance : 0;
            return balance >= total_cost;
        } catch (error) {
            console.error('Error checking balance:', error);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
            return false;
        }
    },

    // –ù–æ–≤—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
    uploadProfileImage: async (imageFile) => {
        try {
            const formData = new FormData();
            // –í–∞–∂–Ω–æ: –ø–æ–ª–µ 'image' –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î ProfileImageUploadSerializer
            formData.append('image', imageFile);
            
            const response = await api.post('/users/profile/upload-image/', formData);
            return response.data;
        } catch (error) {
            console.error('usersAPI.uploadProfileImage error:', error);
            
            // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ 429
            if (error.response?.status === 429) {
                throw new Error('–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —Å–ø—Ä–æ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –≥–æ–¥–∏–Ω—É.');
            }
            
            throw error;
        }
    },

    deleteProfileImage: async () => {
        try {
            const response = await api.delete('/users/profile/delete-image/');
            return response.data;
        } catch (error) {
            throw error;
        }
    },

    updateEmail: async (newEmail) => {
        try {
            const response = await api.post('/users/profile/update-email/', {
                new_email: newEmail
            });
            return response.data;
        } catch (error) {
            throw error;
        }
    },

    changePassword: async (oldPassword, newPassword, confirmPassword) => {
        try {
            const response = await api.post('/users/profile/change-password/', {
                old_password: oldPassword,
                new_password: newPassword,
                confirm_password: confirmPassword
            });
            return response.data;
        } catch (error) {
            throw error;
        }
    },

    updateNotificationSettings: async (settings) => {
        try {
            const response = await api.put('/users/profile/notification-settings/', settings);
            return response.data;
        } catch (error) {
            throw error;
        }
    },

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–∫–ª–∞–¥–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    getUserBookmarks: async (status = null) => {
        try {
            let url = '/navigation/bookmarks/';
            if (status && status !== 'all') {
                url += `?status=${status}`;
            }
            const response = await api.get(url);
            return response.data;
        } catch (error) {
            console.error('Error fetching user bookmarks:', error);
            throw error;
        }
    }
};