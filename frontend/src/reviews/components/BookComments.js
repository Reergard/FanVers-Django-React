import React, { useState, useEffect } from 'react';
import { useSelector } from 'react-redux';
import { fetchBookComments, postBookComment, updateReaction } from '../../api/reviews/reviewsAPI';
import CommentForm from './CommentForm';

const BookComments = ({ bookSlug }) => {
  const [comments, setComments] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [replyingTo, setReplyingTo] = useState(null);
  
  const isAuthenticated = useSelector(state => state.auth.isAuthenticated);

  const loadComments = async () => {
    setLoading(true);
    try {
      const fetchedComments = await fetchBookComments(bookSlug);
      setComments(Array.isArray(fetchedComments) ? fetchedComments : []);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadComments();
  }, [bookSlug]);

  const handleCommentSubmit = async (text, parentId = null) => {
    if (!isAuthenticated) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π');
        return;
    }
    setLoading(true);
    try {
        const newComment = await postBookComment(bookSlug, text, parentId);
        setComments(prevComments => 
          Array.isArray(prevComments) ? [...prevComments, newComment] : [newComment]
        );
        await loadComments();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
    } finally {
        setLoading(false);
    }
  };

  const handleReply = async (event, parentId, parentText) => {
    event.preventDefault();
    if (!replyingTo) return;

    setLoading(true);
    try {
      const replyText = `${parentText}, ${replyingTo.text}`;
      await postBookComment(bookSlug, replyText, parentId);
      setReplyingTo(null);
      await loadComments();
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞');
    } finally {
      setLoading(false);
    }
  };

  const handleReaction = async (commentId, action) => {
    if (!isAuthenticated) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é');
        return;
    }
    try {
      await updateReaction(commentId, 'book', action);
      loadComments();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏');
    }
  };

  const renderComment = (comment) => (
    <li key={comment.id}>
      <p>{comment.text}</p>
      <div>
        <button 
          onClick={() => handleReaction(comment.id, 'like')}
          style={{color: comment.user_reaction === 'like' ? 'blue' : 'black'}}
        >
          üëç {comment.likes_count}
        </button>
        <button 
          onClick={() => handleReaction(comment.id, 'dislike')}
          style={{color: comment.user_reaction === 'dislike' ? 'red' : 'black'}}
        >
          üëé {comment.dislikes_count}
        </button>
        <button onClick={() => setReplyingTo({ id: comment.id, text: '' })}>
          –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
        </button>
      </div>
      {replyingTo && replyingTo.id === comment.id && (
        <form onSubmit={(e) => handleReply(e, comment.id, comment.text)}>
          <textarea
            value={replyingTo.text}
            onChange={(e) => setReplyingTo({ ...replyingTo, text: e.target.value })}
            placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç"
          ></textarea>
          <button type="submit" disabled={loading}>–û—Ç–≤–µ—Ç–∏—Ç—å</button>
        </form>
      )}
      {comment.replies && comment.replies.length > 0 && (
        <ul>
          {comment.replies.map(renderComment)}
        </ul>
      )}
    </li>
  );

  return (
    <div>
      <h2>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</h2>
      {error && <p className="error-message">{error}</p>}
      {loading && <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>}
      
      {isAuthenticated && (
        <CommentForm
          onSubmit={handleCommentSubmit}
          loading={loading}
        />
      )}

      {Array.isArray(comments) && comments.length > 0 ? (
        <ul className="comments-list">
          {comments.map(renderComment)}
        </ul>
      ) : (
        <p>{loading ? '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...' : '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.'}</p>
      )}

      {!isAuthenticated && (
        <p className="auth-message">–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</p>
      )}
    </div>
  );
};

export default BookComments;
