import axios from 'axios';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';

class TokenService {
    constructor() {
        this.refreshPromise = null;
        this.tokenCheckInterval = null;
        this.startTokenMonitoring();
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º)
    async getValidToken() {
        const token = localStorage.getItem('token');
        const refreshToken = localStorage.getItem('refresh');
        
        if (!token || !refreshToken) {
            throw new Error('–¢–æ–∫–µ–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
        if (this.isTokenExpired(token)) {
            console.log('üîë –¢–æ–∫–µ–Ω –∑–∞—Å—Ç–∞—Ä—ñ–≤, –æ–Ω–æ–≤–ª—é—î–º–æ...');
            return await this.refreshToken(refreshToken);
        }

        return token;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
    isTokenExpired(token) {
        try {
            const payload = JSON.parse(atob(token.split('.')[1]));
            const currentTime = Date.now() / 1000;
            const bufferTime = 60; // 1 –º–∏–Ω—É—Ç–∞ –±—É—Ñ–µ—Ä–∞
            
            return payload.exp < (currentTime + bufferTime);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
            return true; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    async refreshToken(refreshToken) {
        if (this.refreshPromise) {
            return await this.refreshPromise;
        }

        this.refreshPromise = (async () => {
            try {
                console.log('üîÑ –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω...');
                const response = await axios.post(`${API_URL}/auth/jwt/refresh/`, {
                    refresh: refreshToken
                });

                const { access } = response.data;
                if (!access) {
                    throw new Error('–ù–µ–º–∞—î access —Ç–æ–∫–µ–Ω–∞ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ');
                }

                localStorage.setItem('token', access);
                console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ');
                return access;

            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞:', error);
                // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
                localStorage.removeItem('token');
                localStorage.removeItem('refresh');
                throw error;
            } finally {
                this.refreshPromise = null;
            }
        })();

        return await this.refreshPromise;
    }

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤
    startTokenMonitoring() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        this.tokenCheckInterval = setInterval(async () => {
            try {
                const token = localStorage.getItem('token');
                if (token && this.isTokenExpired(token)) {
                    console.log('üîë –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–æ–≥–æ —Ç–æ–∫–µ–Ω–∞...');
                    const refreshToken = localStorage.getItem('refresh');
                    if (refreshToken) {
                        await this.refreshToken(refreshToken);
                    }
                }
            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞:', error);
            }
        }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    stopTokenMonitoring() {
        if (this.tokenCheckInterval) {
            clearInterval(this.tokenCheckInterval);
            this.tokenCheckInterval = null;
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
    clearTokens() {
        localStorage.removeItem('token');
        localStorage.removeItem('refresh');
        this.stopTokenMonitoring();
    }
}

export default new TokenService();
