import axios from 'axios';

export const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';

export const api = axios.create({
  baseURL: API_URL,
});

let refreshPromise = null;
let forcingLogout = false; // ‚¨ÖÔ∏è —Ñ–ª–∞–≥ "–ª–æ–≥–∞—É—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è/–≤—ã–ø–æ–ª–Ω–µ–Ω"

const isAuthEndpoint = (url = '') =>
  url.includes('/auth/jwt/refresh/') || url.includes('/auth/jwt/create/');

const forceLogout = () => {
  if (forcingLogout) return;        // ‚¨ÖÔ∏è –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
  forcingLogout = true;

  try {
    // –û—á–∏—â–∞—î–º–æ localStorage
    localStorage.removeItem('token');
    localStorage.removeItem('refresh');
    localStorage.removeItem('user');
    
    // –û—á–∏—â–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ axios
    delete api.defaults.headers.common.Authorization;
    
    // –î–æ–¥–∞—î–º–æ –ø–æ–¥—ñ—é –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è Redux state
    window.dispatchEvent(new CustomEvent('forceLogout'));
    
    console.log('üö™ Force logout –≤–∏–∫–æ–Ω–∞–Ω–æ, –æ—á–∏—â–µ–Ω–æ –≤—Å—ñ –¥–∞–Ω—ñ');
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ force logout:', error);
  } finally {
    // –ó–∞–º—ñ–Ω—è—î–º–æ URL (–±–µ–∑ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É –≤ —ñ—Å—Ç–æ—Ä—ñ—é)
    window.location.replace('/login');
  }
};

api.interceptors.request.use(
  (config) => {
    // –Ø–∫—â–æ –º–∏ –≤–∂–µ –ª–æ–≥–∞—É—Ç–∏–º—Å—è ‚Äî –Ω–µ –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î–º–æ —Ç–æ–∫–µ–Ω
    if (!forcingLogout) {
      const token = localStorage.getItem('token');
      if (token) {
        config.headers.Authorization = `JWT ${token}`;
      }
    }

    // –ù–µ —Ñ–æ—Ä—Å–∏–º Content-Type –¥–ª—è FormData
    if (config.data instanceof FormData) {
      delete config.headers['Content-Type'];
      delete config.headers['content-type'];
    }
    return config;
  },
  (error) => Promise.reject(error)
);

api.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    // —è–∫—â–æ –≤–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ —Ñ–æ—Ä—Å-–ª–æ–≥–∞—É—Ç–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    if (forcingLogout) return Promise.reject(error);

    // –Ω–µ —Ä–µ—Ñ—Ä–µ—à–∏–º auth –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏
    if (isAuthEndpoint(originalRequest?.url)) {
      return Promise.reject(error);
    }

    // –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–º–∏–ª–∫–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è
    if (error.code === 'ERR_NETWORK' || error.message === 'Network Error') {
      console.error('üåê –ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º:', error.message);
      return Promise.reject(error);
    }

    // 401: –ø—Ä–æ–±—É–µ–º refresh –æ–¥–∏–Ω —Ä–∞–∑
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;

      // —è–∫—â–æ –Ω–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞ –∞–±–æ refresh ‚Äî –æ–¥—Ä–∞–∑—É –≤–∏—Ö–æ–¥–∏–º–æ
      const token = localStorage.getItem('token');
      const refreshToken = localStorage.getItem('refresh');
      if (!token || !refreshToken) {
        console.log('‚ùå –ù–µ–º–∞—î —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è refresh, –≤–∏–∫–æ–Ω—É—î–º–æ logout');
        forceLogout();
        return Promise.reject(error);
      }

      // —è–∫—â–æ refresh –≤–∂–µ –π–¥–µ ‚Äî –¥–æ—á–µ–∫–∞—Ç–∏—Å—è
      if (refreshPromise) {
        try {
          await refreshPromise;
          const newToken = localStorage.getItem('token');
          if (!newToken) {
            console.log('‚ùå Refresh –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω, logout');
            forceLogout();
            return Promise.reject(error);
          }
          originalRequest.headers = {
            ...(originalRequest.headers || {}),
            Authorization: `JWT ${newToken}`,
          };
          return api(originalRequest);
        } catch (e) {
          console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ refresh, logout');
          forceLogout();
          return Promise.reject(e);
        }
      }

      // –∑–∞–ø—É—Å—Ç–∏—Ç–∏ refresh
      refreshPromise = (async () => {
        try {
          console.log('üîÑ –í–∏–∫–æ–Ω—É—î–º–æ refresh —Ç–æ–∫–µ–Ω–∞...');
          const resp = await axios.post(`${API_URL}/auth/jwt/refresh/`, {
            refresh: refreshToken,
          });
          const { access } = resp.data || {};
          if (!access) throw new Error('No access in refresh response');

          localStorage.setItem('token', access);
          api.defaults.headers.common.Authorization = `JWT ${access}`;
          console.log('‚úÖ Refresh —Ç–æ–∫–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–∏–π');
          return access;
        } catch (e) {
          console.log('‚ùå Refresh —Ç–æ–∫–µ–Ω–∞ –Ω–µ –≤–¥–∞–≤—Å—è:', e.message);
          forceLogout();
          throw e;
        } finally {
          refreshPromise = null;
        }
      })();

      try {
        await refreshPromise;
        const newToken = localStorage.getItem('token');
        if (!newToken) {
          console.log('‚ùå –ù–µ–º–∞—î –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –ø—ñ—Å–ª—è refresh, logout');
          forceLogout();
          return Promise.reject(error);
        }
        originalRequest.headers = {
          ...(originalRequest.headers || {}),
          Authorization: `JWT ${newToken}`,
        };
        return api(originalRequest);
      } catch (e) {
        // –≤–∞–∂–ª–∏–≤–∏–π –º–æ–º–µ–Ω—Ç: –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –ü–†–ò–ß–ò–ù–£, –∞ –Ω–µ –∏—Å—Ö–æ–¥–Ω—É—é –æ—à–∏–±–∫—É
        return Promise.reject(e);
      }
    }

    return Promise.reject(error);
  }
);

export default api;